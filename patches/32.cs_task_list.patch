diff --git a/src/task_list/task_list.hpp b/src/task_list/task_list.hpp
index fab49508..fc6d136c 100644
--- a/src/task_list/task_list.hpp
+++ b/src/task_list/task_list.hpp
@@ -146,6 +146,7 @@ class TimeIntegratorTaskList : public TaskList {

   // functions
   TaskStatus ClearAllBoundary(MeshBlock *pmb, int stage);
+  TaskStatus RestartReceiving(MeshBlock *pmb, int stage);

   TaskStatus CalculateHydroFlux(MeshBlock *pmb, int stage);
   TaskStatus CalculateEMF(MeshBlock *pmb, int stage);
@@ -401,5 +402,11 @@ const TaskID RECV_RADSH(74);

 const TaskID SRCTERM_IMRAD(75);

+const TaskID SEND_HYD2(101);
+const TaskID RECV_HYD2(102);
+const TaskID SETB_HYD2(103);
+const TaskID CLEAR_ALLBND2(104);
+const TaskID RESTART_RECV(105);
+
 }  // namespace HydroIntegratorTaskNames
 #endif  // TASK_LIST_TASK_LIST_HPP_
 diff --git a/src/task_list/time_integrator.cpp b/src/task_list/time_integrator.cpp
index 097afa53..a48e1fcb 100644
--- a/src/task_list/time_integrator.cpp
+++ b/src/task_list/time_integrator.cpp
@@ -36,6 +36,9 @@
 #include "../scalars/scalars.hpp"
 #include "task_list.hpp"
 
+// canoe injection
+#include <configure.hpp>
+
 //----------------------------------------------------------------------------------------
 //! TimeIntegratorTaskList constructor
 
@@ -998,6 +1001,14 @@ TimeIntegratorTaskList::TimeIntegratorTaskList(ParameterInput *pin, Mesh *pm) {
       AddTask(SEND_HYD,src_aterm);
       AddTask(RECV_HYD,NONE);
       AddTask(SETB_HYD,(RECV_HYD|SRC_TERM));
+
+#ifdef CUBED_SPHERE
+      AddTask(CLEAR_ALLBND2, SETB_HYD);
+      AddTask(RESTART_RECV, CLEAR_ALLBND2);
+      AddTask(SEND_HYD2, CLEAR_ALLBND2);
+      AddTask(RECV_HYD2, RESTART_RECV);
+      AddTask(SETB_HYD2, RECV_HYD2);
+#endif  // CUBED_SPHERE
     }
 
     if (SHEAR_PERIODIC) {
@@ -1156,9 +1167,17 @@ TimeIntegratorTaskList::TimeIntegratorTaskList(ParameterInput *pin, Mesh *pm) {
           }
         } else {
           if (NSCALARS > 0) {
+#ifdef CUBED_SPHERE
+            AddTask(CONS2PRIM,(SETB_HYD2|SETB_SCLR));
+#else
             AddTask(CONS2PRIM,(SETB_HYD|SETB_SCLR));
+#endif  // CUBED_SPHERE
           } else {
+#ifdef CUBED_SPHERE
+            AddTask(CONS2PRIM,SETB_HYD2);
+#else
             AddTask(CONS2PRIM,SETB_HYD);
+#endif  // CUBED_SPHERE
           }
         }
       }
@@ -1224,11 +1243,16 @@ void TimeIntegratorTaskList::AddTask(const TaskID& id, const TaskID& dep) {
   //!   SRC_TERM and SourceTerms(), USERWORK, PHY_BVAL, PROLONG, CONS2PRIM,
   //!   ... Although, AMR_FLAG = "flag blocks for AMR" should be FLAG_AMR in VERB_OBJECT
   using namespace HydroIntegratorTaskNames; // NOLINT (build/namespace)
-  if (id == CLEAR_ALLBND) {
+  if (id == CLEAR_ALLBND or id == CLEAR_ALLBND2) {
     task_list_[ntasks].TaskFunc=
         static_cast<TaskStatus (TaskList::*)(MeshBlock*,int)>
         (&TimeIntegratorTaskList::ClearAllBoundary);
     task_list_[ntasks].lb_time = false;
+  } else if (id == RESTART_RECV) {
+    task_list_[ntasks].TaskFunc=
+        static_cast<TaskStatus (TaskList::*)(MeshBlock*,int)>
+        (&TimeIntegratorTaskList::RestartReceiving);
+    task_list_[ntasks].lb_time = false;
   } else if (id == CALC_HYDFLX) {
     task_list_[ntasks].TaskFunc=
         static_cast<TaskStatus (TaskList::*)(MeshBlock*,int)>
@@ -1274,7 +1298,7 @@ void TimeIntegratorTaskList::AddTask(const TaskID& id, const TaskID& dep) {
         static_cast<TaskStatus (TaskList::*)(MeshBlock*,int)>
         (&TimeIntegratorTaskList::AddSourceTerms);
     task_list_[ntasks].lb_time = true;
-  } else if (id == SEND_HYD) {
+  } else if (id == SEND_HYD or id == SEND_HYD2) {
     task_list_[ntasks].TaskFunc=
         static_cast<TaskStatus (TaskList::*)(MeshBlock*,int)>
         (&TimeIntegratorTaskList::SendHydro);
@@ -1284,17 +1308,16 @@ void TimeIntegratorTaskList::AddTask(const TaskID& id, const TaskID& dep) {
         static_cast<TaskStatus (TaskList::*)(MeshBlock*,int)>
         (&TimeIntegratorTaskList::SendField);
     task_list_[ntasks].lb_time = true;
-  } else if (id == RECV_HYD) {
+  } else if (id == RECV_HYD or id == RECV_HYD2) {
     task_list_[ntasks].TaskFunc=
         static_cast<TaskStatus (TaskList::*)(MeshBlock*,int)>
         (&TimeIntegratorTaskList::ReceiveHydro);
-    task_list_[ntasks].lb_time = false;
   } else if (id == RECV_FLD) {
     task_list_[ntasks].TaskFunc=
         static_cast<TaskStatus (TaskList::*)(MeshBlock*,int)>
         (&TimeIntegratorTaskList::ReceiveField);
     task_list_[ntasks].lb_time = false;
-  } else if (id == SETB_HYD) {
+  } else if (id == SETB_HYD or id == SETB_HYD2) {
     task_list_[ntasks].TaskFunc=
         static_cast<TaskStatus (TaskList::*)(MeshBlock*,int)>
         (&TimeIntegratorTaskList::SetBoundariesHydro);
@@ -1683,6 +1706,19 @@ TaskStatus TimeIntegratorTaskList::ClearAllBoundary(MeshBlock *pmb, int stage) {
   return TaskStatus::success;
 }
 
+//----------------------------------------------------------------------------------------
+//! Functions to receive Hydro variables between MeshBlocks for the second time
+
+TaskStatus TimeIntegratorTaskList::RestartReceiving(MeshBlock *pmb, int stage) {
+  if (stage <= nstages) {
+    if (stage_wghts[stage-1].main_stage) {
+      pmb->pbval->StartReceivingSubset(BoundaryCommSubset::all, pmb->pbval->bvars_main_int);
+    }
+  }
+
+  return TaskStatus::success;
+}
+
 //----------------------------------------------------------------------------------------
 // Functions to calculates Hydro fluxes
 
@@ -2003,6 +2039,7 @@ TaskStatus TimeIntegratorTaskList::ReceiveHydro(MeshBlock *pmb, int stage) {
   }
 }
 
+
 //----------------------------------------------------------------------------------------
 //! Functions to receive Field variables between MeshBlocks
 
